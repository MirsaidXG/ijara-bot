import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler
from collections import defaultdict
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user ID
SAME_MESSAGE_LIMIT = 2  # –õ–∏–º–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = defaultdict(lambda: defaultdict(list))  # {user_id: {message_text: [timestamp1, timestamp2, ...]}}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "supergroup":
        return

    user_id = update.effective_user.id
    message_text = update.message.text.strip() if update.message.text else ""
    chat_id = update.effective_chat.id
    now = time.time()

    if not message_text:
        return

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    for msg, timestamps in list(user_messages[user_id].items()):
        user_messages[user_id][msg] = [ts for ts in timestamps if now - ts < 86400]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_messages[user_id][message_text].append(now)

    count = len(user_messages[user_id][message_text])
    if count > SAME_MESSAGE_LIMIT:
        await update.message.delete()
        await update.message.reply_text("‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        await context.bot.send_message(chat_id=ADMIN_ID, text=(
            f"üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ:
"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username or user_id}
"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "{message_text}"
"
            f"üî¢ –ö–æ–ª-–≤–æ –∑–∞ —Å—É—Ç–∫–∏: {count}
"
            f"‚è∞ –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(now))}"
        ))

async def set_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SAME_MESSAGE_LIMIT
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        new_limit = int(context.args[0])
        SAME_MESSAGE_LIMIT = new_limit
        await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_limit} –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /setlimit 2")

async def get_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {SAME_MESSAGE_LIMIT} –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏.")

def main():
    app = ApplicationBuilder().token("YOUR_BOT_TOKEN").build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(CommandHandler("setlimit", set_limit))
    app.add_handler(CommandHandler("getlimit", get_limit))
    app.run_polling()

if __name__ == "__main__":
    main()